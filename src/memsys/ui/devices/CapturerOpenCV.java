/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package memsys.ui.devices;

/**
 *
 * @author LESTER
 */
public class CapturerOpenCV extends javax.swing.JDialog {

    /**
     * Creates new form CapturerOpenCV
     */
    public CapturerOpenCV(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdCapture = new javax.swing.JButton();
        desk = new javax.swing.JDesktopPane();
        jLabel2 = new javax.swing.JLabel();
        LBLCAPTION = new javax.swing.JLabel();
        capturer1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        preview = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        captured = new javax.swing.JLabel();
        cmdSave = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cmdCapture.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdCapture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/capturer.png"))); // NOI18N
        cmdCapture.setMnemonic('C');
        cmdCapture.setText("CAPTURE");
        cmdCapture.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdCaptureMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmdCaptureMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cmdCaptureMouseReleased(evt);
            }
        });
        cmdCapture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCaptureActionPerformed(evt);
            }
        });

        desk.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 3));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 8)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("CAPTURE WINDOW");
        desk.add(jLabel2);
        jLabel2.setBounds(20, 20, 190, 10);

        LBLCAPTION.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        LBLCAPTION.setForeground(new java.awt.Color(255, 255, 255));
        LBLCAPTION.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        desk.add(LBLCAPTION);
        LBLCAPTION.setBounds(110, 210, 390, 50);

        capturer1.setForeground(new java.awt.Color(255, 102, 0));
        capturer1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/captures2.png"))); // NOI18N
        capturer1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        capturer1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                capturer1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                capturer1MouseMoved(evt);
            }
        });
        capturer1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                capturer1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                capturer1MouseReleased(evt);
            }
        });
        desk.add(capturer1);
        capturer1.setBounds(210, 110, 200, 200);
        desk.add(jLabel4);
        jLabel4.setBounds(20, 370, 120, 100);

        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        desk.add(jLabel3);
        jLabel3.setBounds(10, 10, 620, 460);
        desk.add(preview);
        preview.setBounds(0, 0, 640, 480);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CAPTURED PREVIEW");

        captured.setForeground(new java.awt.Color(255, 102, 0));
        captured.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 0)));

        cmdSave.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/save.png"))); // NOI18N
        cmdSave.setMnemonic('S');
        cmdSave.setText("Save");
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        cmdExit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/exit.png"))); // NOI18N
        cmdExit.setMnemonic('x');
        cmdExit.setText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(desk, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cmdSave, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdCapture, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(captured, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(cmdExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(desk, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(captured, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(cmdCapture)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmdSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdExit)
                        .addGap(40, 40, 40))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdCaptureMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdCaptureMouseClicked

    }//GEN-LAST:event_cmdCaptureMouseClicked

    private void cmdCaptureMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdCaptureMousePressed
        captured.setIcon(null);
        LBLCAPTION.setText("PROCESSING...");
    }//GEN-LAST:event_cmdCaptureMousePressed

    private void cmdCaptureMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdCaptureMouseReleased
//        try {
//            captureStream.stop();
//        } catch (CaptureException ex) {
//            Logger.getLogger(Capturer1.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        try {
//            BufferedImage img = readImage("img/previewer/img.jpg");
//            writeImage(img, "img/captured/img.jpg", "jpg");
//
//            BufferedImage originalImage = readImage("img/captured/img.jpg");
//            try {
//                BufferedImage processedImage = cropMyImage(originalImage, 200, 200, capturer1.getX(), capturer1.getY());
//                writeImage(processedImage, "img/cropped/img.jpg", "jpg");
//            } catch (Exception ex) {
//                Logger.getLogger(Capturer1.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            //GET THE PREVIEW FROM THE SOURCE FILE
//            File file = new File("img/cropped/img.jpg");
//            BufferedImage myImage = ImageIO.read(file);
//            captured.setIcon(new ImageIcon(myImage));
//            captured.revalidate();
//
//            LBLCAPTION.setText(null);
//
//        } catch (Exception e) {
//            LBLCAPTION.setText(null);
//            e.getStackTrace();
//        }

//        try {
//            captureStream.start();
//        } catch (CaptureException ex) {
//            Logger.getLogger(Capturer1.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_cmdCaptureMouseReleased

    private void cmdCaptureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCaptureActionPerformed

    }//GEN-LAST:event_cmdCaptureActionPerformed

    private void capturer1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_capturer1MouseDragged
        capturer1.setLocation((capturer1.getX() - capturer1.getWidth() / 2) + evt.getX(), (capturer1.getY() - capturer1.getHeight() / 2) + evt.getY());
    }//GEN-LAST:event_capturer1MouseDragged

    private void capturer1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_capturer1MouseMoved
        //capturer1.setLocation(preX + evt.getX(), preY + evt.getY());
    }//GEN-LAST:event_capturer1MouseMoved

    private void capturer1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_capturer1MousePressed

    }//GEN-LAST:event_capturer1MousePressed

    private void capturer1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_capturer1MouseReleased
        int x = capturer1.getX();
        int y = capturer1.getY();

        if (x >= 480 || y >= 320 || x <= -100 || y <= -100) {
            capturer1.setLocation(80, 40);
        }
    }//GEN-LAST:event_capturer1MouseReleased

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
//        try {
//            String path = getPicPath();
//            BufferedImage img = readImage("img/cropped/img.jpg");
//            writeImage(img, path + memID + ".jpg", "jpg");
//
//            try {
//                StopCam();
//            } catch (NullPointerException e) {
//                e.getStackTrace();
//            }
//
//            this.dispose();
//            JOptionPane.showMessageDialog(null, "Profile Picture Successfully Saved!");
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Failed! Please check your network settings");
//        }
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
//
//        try {
//            StopCam();
//        } catch (NullPointerException e) {
//            e.getStackTrace();
//        }
//        this.dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CapturerOpenCV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CapturerOpenCV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CapturerOpenCV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CapturerOpenCV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CapturerOpenCV dialog = new CapturerOpenCV(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LBLCAPTION;
    private javax.swing.JLabel captured;
    private javax.swing.JLabel capturer1;
    private javax.swing.JButton cmdCapture;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdSave;
    private javax.swing.JDesktopPane desk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel preview;
    // End of variables declaration//GEN-END:variables
}
